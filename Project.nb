(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     65170,       1417]
NotebookOptionsPosition[     62802,       1337]
NotebookOutlinePosition[     63143,       1352]
CellTagsIndexPosition[     63100,       1349]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.651244314262516*^9, 3.6512443212347193`*^9}, 
   3.651249647729488*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"r", "[", "t_", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"3", 
      RowBox[{"Cos", "[", 
       RowBox[{"3.3", "\[Pi]", "*", "t"}], "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"4", "\[Pi]", "*", "t"}], "]"}], " ", "+", " ", 
      RowBox[{"4", "*", "t"}]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.651244325692767*^9, 3.6512443659387517`*^9}, 
   3.65124465465619*^9, {3.6512446961446037`*^9, 3.6512446965608244`*^9}, {
   3.6512448144799223`*^9, 3.65124481490015*^9}, {3.651245180624118*^9, 
   3.6512451904125443`*^9}, {3.651249609503048*^9, 3.6512496369039574`*^9}, {
   3.6512496678040466`*^9, 3.651249670995947*^9}, 3.651260480237215*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"track", " ", "=", 
   RowBox[{"ParametricPlot", "[", 
    RowBox[{
     RowBox[{"r", "[", "t", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"AxesLabel", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"\"\<x\>\"", ",", " ", "Bold"}], "]"}], ",", " ", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<y\>\"", ",", " ", "Bold"}], "]"}]}], "}"}]}], ",", " ", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.651244369838868*^9, 3.651244478526802*^9}, {
   3.651244533343398*^9, 3.6512445709037557`*^9}, {3.651244708391739*^9, 
   3.6512447271948805`*^9}, {3.6512448130159087`*^9, 3.651244912315166*^9}, {
   3.65124497528105*^9, 3.6512450033039446`*^9}, 3.6512452053288717`*^9, 
   3.6512452540951967`*^9, 3.651249460108961*^9, {3.6512495840921144`*^9, 
   3.651249584664124*^9}, {3.651249685616418*^9, 3.651249697248456*^9}, {
   3.6512498036929655`*^9, 3.6512498158743362`*^9}, {3.651249900764276*^9, 
   3.6512499060607834`*^9}, {3.6512499442892704`*^9, 3.651249962681988*^9}, 
   3.651252931877812*^9, {3.651255498202174*^9, 3.6512555717125916`*^9}}],

Cell["\<\
Find the location of the Pont; where the course crosses itself.\
\>", "Text",
 CellChangeTimes->{{3.6512529485728545`*^9, 3.6512529933244095`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bridge", " ", "=", " ", 
  RowBox[{"t", "/.", 
   RowBox[{"FindRoot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"r", "[", "t", "]"}], " ", "\[Equal]", " ", 
       RowBox[{"r", "[", "s", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"s", ",", " ", "0.5"}], "}"}]}], "]"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "grab", " ", "the", " ", "t", " ", "value", " ", "found", " ", "from", 
     " ", 
     RowBox[{"FindRoot", ".", " ", "s"}], " ", "would", " ", "work", " ", 
     "as", " ", 
     RowBox[{"well", "."}]}], " ", "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.6512546229384985`*^9, 3.651254643726513*^9}, {
  3.651254839225853*^9, 3.6512549280796127`*^9}, {3.651254968952897*^9, 
  3.651254980816723*^9}, {3.651255219510022*^9, 3.6512552232893486`*^9}}],

Cell[BoxData["0.13480360729115623`"], "Output",
 CellChangeTimes->{3.6512604877075267`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cauchy", " ", "=", " ", 
    RowBox[{"Graphics", "[", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"Disk", "[", 
        RowBox[{
         RowBox[{"r", "[", "0", "]"}], ",", " ", "0.06"}], "]"}], ",", " ", 
       "Green"}], "]"}], "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"laplace", " ", "=", " ", 
   RowBox[{"Graphics", "[", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"r", "[", "1", "]"}], ",", " ", "0.06"}], "]"}], ",", " ", 
      "Red"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pont", " ", "=", " ", 
   RowBox[{"Graphics", "[", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"Disk", "[", 
       RowBox[{
        RowBox[{"r", "[", "bridge", "]"}], ",", " ", "0.06"}], "]"}], ",", 
      " ", "Orange"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.651245007396187*^9, 3.651245051204002*^9}, {
   3.65124522300677*^9, 3.6512452487021675`*^9}, {3.651249437044648*^9, 
   3.6512495007718234`*^9}, 3.6512495948884263`*^9, {3.6512497185165844`*^9, 
   3.651249719236636*^9}, {3.6512497584972954`*^9, 3.6512497950141573`*^9}, {
   3.651249973202069*^9, 3.6512500054194126`*^9}, {3.6512500855535183`*^9, 
   3.6512501106482954`*^9}, {3.651251838094839*^9, 3.6512519154351745`*^9}, {
   3.651253462127231*^9, 3.6512534882145133`*^9}, {3.651253519259205*^9, 
   3.6512535787679043`*^9}, {3.651253888367655*^9, 3.6512538897746553`*^9}, {
   3.651254418285206*^9, 3.651254418314294*^9}, {3.6512544567576904`*^9, 
   3.6512545894006014`*^9}, {3.6512548774988813`*^9, 3.651254879784963*^9}, {
   3.6512549470270777`*^9, 3.6512549480230775`*^9}, {3.6512550943700533`*^9, 
   3.6512551865661297`*^9}, {3.6512555297160573`*^9, 
   3.6512555318904643`*^9}, {3.651255579059166*^9, 3.6512555886818156`*^9}, {
   3.6512569161484437`*^9, 3.6512569182570467`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
  "track", ",", " ", "cauchy", ",", " ", "laplace", ",", " ", "pont"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6512452564346266`*^9, 3.6512452620646267`*^9}, {
   3.6512497994995365`*^9, 3.6512497999664245`*^9}, {3.651249999506048*^9, 
   3.651250000501908*^9}, {3.6512501137812357`*^9, 3.6512501150790563`*^9}, {
   3.651253550158575*^9, 3.6512535713292236`*^9}, {3.65125389764376*^9, 
   3.6512539037729187`*^9}, {3.6512544464724684`*^9, 3.651254448527484*^9}, 
   3.651256276049123*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
L/wfH57NhA==
      "]]}}, 
   {RGBColor[0, 1, 0], DiskBox[{3., 0}, 0.06]}, 
   {RGBColor[1, 0, 0], DiskBox[{-1.7633557568774205`, 4}, 0.06]}, 
   {RGBColor[1, 0.5, 0], 
    DiskBox[{0.5171622323317491, 1.5316354241548875`}, 0.06]}},
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     StyleBox["\"x\"", Bold, StripOnInput -> False], TraditionalForm], 
    FormBox[
     StyleBox["\"y\"", Bold, StripOnInput -> False], TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Full,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.651260487723511*^9}]
}, Open  ]],

Cell["\<\
Speed is just the magnitude of the velocity vector at a given time, t. \
\>", "Text",
 CellChangeTimes->{{3.6512501564369287`*^9, 3.6512501577055845`*^9}, {
  3.651251934295123*^9, 3.6512519658758917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"v", "[", "t_", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"r", "'"}], "[", "t", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.651250162988593*^9, 3.651250174972514*^9}, {
  3.6512519723273177`*^9, 3.6512519887160425`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"v", "[", "t", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.651251990481044*^9, 3.6512520068711014`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
Xl6YprGrkjQXb0o6spN8+3nftx5USKfOvzh32aIdIz95au9XrZeRpN6/Vafs
VOggr3n5dy1fyj8JVfWDk3+GeJcaFjE+inBRbF/z16+RI7yvMTWBfZT/LpYP
CpxbOMoj7/iT3ZQ/eyx/ZLYJj/GUjVx9L8+SePho3V+fU794//bX1LlS/rZS
7px7zWmct/7Pz5I+yv8xDNMFoaK/eaVzw1gdv0g09LatEI+e4NVfevDOdpRE
Yu2e7eULJ3mxG8xnQ4dInFyJH5UEp3jBL8Lk8ntJfP9xy7fLEdM879InIXM/
U/Uk5/Px1n1/eXe3G/R1fSLR2cG69a32LO9Z61+Jm03Uc1qb+t7Xs7yui8e8
Rt5Q6/OefFyiyIef+TtOJFD1oZkr7sXZy4/vtJ2uVz2l1h9p2u9YxY9K/ulH
u0uofDcFL1V1AVQ8tP1E/0Mq34Vqtlm+EEC9oWE+wUwSmwJsTJXVhKi6ZLUr
KY1Em1C9tgsBQjiSvOiGYjKJ7A0uda0VQnh5ouTuxzgSyTq60XtfYSyLJJ18
D5GoX6T7x6NYBG/fLImpW0GiZBg3c+0ScdwgjPVaLiQ68GQuHU8Vx+5PHC2v
RSSKiZTXBPWL4w+V5uGr9iSGBCUVPTgrgZ/shmoJOol9OX0GR+rmYK1Wx9dr
PzlY1j0xbjRfCr8lyFUUfOcgVvrnPoqTQl/ameFHXzhYF7Shnr9NCrfZvVx6
uIGDTQNJLt+DpdH1U1GYNvV54fzvRtj21TKYE7NepOwABxfyPFZtiZBF70ea
m3/s4WC30qKpJTmy+GFoZmhmKweTxWQ9JF/L4uUPT+s7VnAwFQJCNDXlcJ2V
tlOqMQeXn2aE+ZXIUeeqm/K2jY1aV7bVJvXJ4+GrMsUX37JRpra0V1hGAUe+
fIqCGjZ2dY38c7FWwJ+dCgs8Cth49kvk9o1HFbCh259zIIaNKgqyIbGyilj9
ROh0vBkbr5d4JA2bKuGTxG0bh3XY6FuwJ/XJCiVc0X57G0uZja5JCkIbgpRQ
dMbZOuEf9fm+oshXqZgaf6Wu2/oNC0cPLF1wiKuMzDN6Lw/6svD1Jv5brYtU
MNDlg1ukFwtV2t3+tPio4E6WZ1bwChZ2RkWsuXtSBa1YG9s0bFg4XNMSV1mp
gjsy1hUG8LGwpe6mfjWoop5pI8E474C7+Ko9fzPV0LpO4ktTlAOG//OsUnFR
w0SW8Y39IQ5YZphMyu5QQ10/jxsHNjighg0MRV1Rwx3G2/yzdB3QyPzsDn8h
dfx3CxY+KrBHBesndIfX6mh3pavb6YY9hv8WcnjYrY5aEnftXybZ47BzefWf
WXXkNDUqXTlojzdz13+TYWpgaDerMoC0RzsLySijcxrIvyP6cXelHSZ0n7WU
nq+J39afneNbaId1B+qLKtZoomZM5sO2G3bIlxy0YImfJhrpCWolRNshvHus
+SZJE2VF12cQTnZ4f4VXypNeTSwSiircUmWLJqeedQqf0sJIy9tm7Y9sUUqr
0rUjRQtH1aRyXbNt8UXr44izd7Xw2v41FRORtmiUFzXs2aiFWsdffYnn2qIM
f6BMtYo2DpgvedhYaIMaTzf9a7mmjQbJhffuZtvggjO0jwfvayP7XtxUWKIN
Hg7UZPc/1ca4Mcu73/fZ4JcpxaBFbdpY/VmlWMbYBm0Sqvj3zKHhlWfBvqGq
Njh50PFTlBwNf7bHvXgjaoPLoP3ZSVUarkl8c8ujyxolX7xOWWhAw3qdE5se
p1ljUt9A8735NNytcej63dPWuO8ffY+UMw07dBv7E8Oscc3aPc1rl9NwYn4K
2rlb4+XCDSY31tMwhXH6aZuENU45r1dm7KdhxtoHB5ODrdDHsIbZmEbDbNqv
ooKtVsiX++B9WSa1/ofU0nI3K6xcav4vIYeGe2xgcRHDCo+6570dfUBDH7ZB
rcBnS/xeO3/ySjkNy44fSiystcQBrsDyV1U0DL66/9SGIkvsfTQr8q2Wmu8R
q3U83hLLog0SXzXS0PrED1+r+ZboY3L67rEOGq4ryPl23NQSc099KRj9RsO0
q979FaqWKCb+kH/ZDxq+dpxt0R61wM8FWttLB2i4ryOtjfXFAj3PpOyvH6bh
QE9mhstLC+zoW/mkZoyG4YnZWYuvW6DzS8vh0CkaBlxN/mMeZ4HhnNEm4z80
NH/b7iIbboGRuioD1bM0PHr/Nv/dlRbY+v7p1WJBOt6w3Ra5k2OB2xkxlnNF
6Fh5tdlUmUH1W5JuQ0vE6OgaWGy/ms8CV1/Z0nBIko7DzFItnT5z/GwpHZgq
RceEN8Ye396Z4+qWvrE0GTpuTpIYTHpqjin2BWui5Oh4lfCeZuea4/Mziy8v
U6BjbJbdmQ8J5ng07XrBjCIdt0DRw83h5rjiVdetc8p03OjLFXJbZo5iI2aa
Xmp0tMooWpVvY46n06Qvp6rTUdb25iExGvX+t6e6nmjQMdp2W8JKcXN8NLZK
qFyTjkty4fq5UQLt/rqM39Ki49ChrIqyVgKXnfMvCtGmY+a5SYH2SgJ5nY2L
DWh0bIstOvDrHoHsL/k3nlAs3u3F+JtEzRf0fWtJp6Pl2zCLqaMEXg/bVxdP
8RnjK5k9uwg8Ib4p8Q3Fc/ZujXm1kkB/vUH9MYpn7wRPZjoQWNsxHj1N8fGQ
k4J+8wgUG/cv+E6xSIvLE4YkgXfR/+4jilMuq2wr6mWimZPJ/p0UhzoYDPM9
YWIpwSc8S+2npW3vfMuzTGyu3eQTRnEfPAxf5sXEDoGviU1UPAHxZTw3Mya6
77U/r0LxVXawlcM/M1RcRHqTVPzJPxv+SDaY4d4NXTNOlD6Taz+yazLMUNYI
9lhT+i0nrqv4BZphbfXJeyKUvqeFvB5NzjdDq16xyieqdPTSW2QVIGeG89vZ
ee4qdEyPvVVW12mKpy49CmpUomNMfHjYoihTbO5fdypEno6btrX92rTaFHvX
Lmm9JkvHxbnZc7bPM0VRFWGpO9J0ZLyRvsJ4boJ7AstV9s6h/FVGePVfMME0
z8hxfXE6do4VuF7eaoJeZvGlFZQfTwRccrrPb4IjUrvEcvjpeKFqaWkbaYw6
96eFNX7TsO9F3K+xucaoYa8TOjZKQ7OCRSd/txnhFP1o7/0hGtL/VXKfhRuh
Hyuro7GHyqfQI1YbCxl4R2squuYTDRdc9+K8jWLgUx33vfiBhu8cCmqtVjHQ
kLx5MI3K3+B1m4Rw0BALjw6L8FP5ve2gu9GYviG+Wlt97nARDeHkxGuTSQOM
7+R+6XtIw4o8v6g1tQao9eu41Px7NBw12JMcvscAObsLaDeyqPc7rfws9kAf
F5bon3eNp2FiQr+zp6UeGuSaqWlupeH39ZtSrwvq4Y76NU/nbKThcGH+6Od3
ukgfM7nY6UHDnNNStsYHdPFm4dxx5yU0DH1sc3reo3koXPnZfMqMhrT7bPdc
cx2M7v17u6VfG3VNKyVo/Dp4s65pXyVVn1eXRdacbaDjgTsrDhyt18bnOe0t
C/bScX08377dVH1nue38rnuXhqS8/Q+pAG2cUb0xVeKkha+DLBrvdWnhiSMb
ZwRVVNB5q9X9Rw80MRSvvFK5q4yG7bs4eimaqEUz0VQHZTxMFw/eEqmJiT6v
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
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-31.1017518287848, 31.10176468851107}, {-8.566364495767987, 
   16.566370614359172`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6512604877670155`*^9}]
}, Open  ]],

Cell["\<\
The average speed is the distanced travelled (arc length 0->1) over the time \
it took (1hr).
Integrate the scalar magnitude of r[t] from t = 0->1 and devide by 1 hour.\
\>", "Text",
 CellChangeTimes->{{3.6512520973618355`*^9, 3.6512521401246567`*^9}, {
  3.6512522703125*^9, 3.6512522948215675`*^9}, {3.651252689379661*^9, 
  3.6512527596134377`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{"Norm", "[", 
     RowBox[{"v", "[", "t", "]"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"t", ",", " ", "0", ",", " ", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"22.0332", " ", 
    RowBox[{"km", "/", "hr"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.6512521448646927`*^9, 3.6512521613620396`*^9}, {
  3.651252206204084*^9, 3.6512522065851803`*^9}, {3.651252655619834*^9, 
  3.651252658902152*^9}, {3.6512527646909733`*^9, 3.65125277814781*^9}}],

Cell[BoxData["22.033156799947204`"], "Output",
 CellChangeTimes->{3.651260487792511*^9}]
}, Open  ]],

Cell["Distance between Cauchy and Laplace. (3.)", "Text",
 CellChangeTimes->{{3.65125049215407*^9, 3.651250525053592*^9}, {
  3.65125206636248*^9, 3.6512520676955643`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dbt", " ", "=", " ", 
  RowBox[{"EuclideanDistance", "[", 
   RowBox[{
    RowBox[{"r", "[", "0", "]"}], ",", 
    RowBox[{"r", "[", "1", "]"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"6.22009", " ", "km"}], " ", "|", " ", "dbt"}], " ", "=", " ", 
    RowBox[{"distance", " ", "between", " ", "towns"}]}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.651250216588261*^9, 3.651250231217478*^9}, {
  3.6512502706119585`*^9, 3.651250344049159*^9}, {3.6512503792027845`*^9, 
  3.651250395448542*^9}, {3.651250455391824*^9, 3.651250469024107*^9}, {
  3.6512527890183954`*^9, 3.6512527988973694`*^9}, {3.651258841405279*^9, 
  3.6512588496695213`*^9}}],

Cell[BoxData["6.2200930914719645`"], "Output",
 CellChangeTimes->{3.6512604878015127`*^9}]
}, Open  ]],

Cell["(4.)", "Text",
 CellChangeTimes->{{3.651255623184911*^9, 3.6512556262529697`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ft", "[", 
   RowBox[{"t_", "?", "NumericQ"}], "]"}], ":=", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{"r", "[", "t", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "x"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6512558481378527`*^9, 3.6512558532487745`*^9}, 
   3.651255895359696*^9, {3.6512560629531326`*^9, 3.651256148372942*^9}, 
   3.6512569854236026`*^9, {3.6512570416642313`*^9, 3.6512570460746794`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ft", "[", "t", "]"}], " ", "\[Equal]", " ", "1"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6512558604649205`*^9, 3.6512558749247074`*^9}, {
  3.651255907783869*^9, 3.651255916509373*^9}, {3.6512561643611383`*^9, 
  3.651256191361766*^9}, {3.6512563996466713`*^9, 3.6512564006986713`*^9}, {
  3.6512569886126027`*^9, 3.651256998571596*^9}, {3.651257053869679*^9, 
  3.651257055782523*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FindRoot", "::", "nlnum"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The function value \[NoBreak]\\!\\({\\(\\(-1.`\\)\\) + \\(\
\\(ft[t]\\)\\)}\\)\[NoBreak] is not a list of numbers with dimensions \
\[NoBreak]\\!\\({1}\\)\[NoBreak] at \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.`}\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/FindRoot\\\", ButtonNote -> \
\\\"FindRoot::nlnum\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.651260487869011*^9}],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ft", "[", "t", "]"}], "\[Equal]", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.651260487870511*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"t_", "?", "NumericQ"}], "]"}], ":=", 
   RowBox[{"NIntegrate", "[", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "t"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "t", "]"}], "\[Equal]", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "1.2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.651256981392581*^9, 3.65125698139858*^9}, {
  3.651257023768009*^9, 3.6512570251090035`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"t", "\[Rule]", "1.4422495703074076`"}], "}"}]], "Output",
 CellChangeTimes->{3.651260487915511*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"kmpt", "[", 
    RowBox[{"t_", "?", "NumericQ"}], "]"}], " ", ":=", " ", 
   RowBox[{"NIntegrate", "[", 
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{"v", "[", "t", "]"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", " ", "s"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"kmpt", "[", "t", "]"}], " ", "\[Equal]", " ", "1"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6512589107316017`*^9, 3.651259146362773*^9}, {
   3.6512591952089276`*^9, 3.6512591993949275`*^9}, {3.6512592345791864`*^9, 
   3.6512592708364224`*^9}, 3.6512593012942843`*^9, {3.651259468406039*^9, 
   3.6512595242998705`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "itraw"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Raw object \[NoBreak]\\!\\(0.`\\)\[NoBreak] cannot be used \
as an iterator. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/itraw\\\", ButtonNote -> \
\\\"NIntegrate::itraw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.651260487953511*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "itraw"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Raw object \[NoBreak]\\!\\(0.`\\)\[NoBreak] cannot be used \
as an iterator. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/itraw\\\", ButtonNote -> \
\\\"NIntegrate::itraw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6512604879860125`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FindRoot", "::", "nlnum"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The function value \[NoBreak]\\!\\({\\(\\(-1.`\\)\\) + \\(\
\\(NIntegrate[\\(\\(\\(\\(Norm[\\(\\(v[0.`]\\)\\)]\\)\\), \\(\\({0.`, 0.`, s}\
\\)\\)\\)\\)]\\)\\)}\\)\[NoBreak] is not a list of numbers with dimensions \
\[NoBreak]\\!\\({1}\\)\[NoBreak] at \[NoBreak]\\!\\({t}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.`}\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/FindRoot\\\", ButtonNote -> \
\\\"FindRoot::nlnum\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6512604880315113`*^9}],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"kmpt", "[", "t", "]"}], "\[Equal]", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.6512604880330114`*^9}]
}, Open  ]],

Cell["\<\
(5.)
Curvature = ||T\[CloseCurlyQuote](t)|| / ||r\[CloseCurlyQuote](t)||
T\[CloseCurlyQuote](t) = r\[CloseCurlyQuote](t) / ||r\[CloseCurlyQuote](t)||, \
but r\[CloseCurlyQuote](t) is v(t)\
\>", "Text",
 CellChangeTimes->{{3.65125958812821*^9, 3.6512595960725083`*^9}, {
  3.651259643812894*^9, 3.6512597069447136`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"T", "[", "t_", "]"}], " ", "=", " ", 
   FractionBox[
    RowBox[{"v", "[", "t", "]"}], 
    RowBox[{"Norm", "[", 
     RowBox[{"v", "[", "t", "]"}], "]"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"K", "[", "t_", "]"}], " ", "=", " ", 
   FractionBox[
    RowBox[{"Norm", "[", 
     RowBox[{
      RowBox[{"T", "'"}], "[", "t", "]"}], "]"}], 
    RowBox[{"Norm", "[", 
     RowBox[{"v", "[", "t", "]"}], "]"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "'"}], "[", "t", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "''"}], "[", "t", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Ko", "[", "t_", "]"}], " ", "=", " ", 
  FractionBox[
   RowBox[{"Norm", "[", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"r", "'"}], "[", "t", "]"}], "}"}], "\[Cross]", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"r", "''"}], "[", "t", "]"}], "}"}]}], ")"}], "]"}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"Norm", "[", 
      RowBox[{
       RowBox[{"r", "'"}], "[", "t", "]"}], "]"}], ")"}], "3"]]}]}], "Input",
 CellChangeTimes->{{3.6512597451807175`*^9, 3.6512598445397506`*^9}, {
  3.651259903251048*^9, 3.65125993019995*^9}, {3.651260007201371*^9, 
  3.6512600222669907`*^9}, {3.6512600568099537`*^9, 3.6512601312039604`*^9}, {
  3.6512601940359373`*^9, 3.6512602074911566`*^9}, {3.6512603078790045`*^9, 
  3.6512603971738267`*^9}, {3.6512604281644945`*^9, 3.651260448347233*^9}, {
  3.651260530966985*^9, 3.6512605475549345`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "31.10176727053895`"}], " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"10.367255756846317`", " ", "t"}], "]"}]}], ",", 
   RowBox[{"4", "+", 
    RowBox[{"4", " ", "\[Pi]", " ", 
     RowBox[{"Cos", "[", 
      RowBox[{"4", " ", "\[Pi]", " ", "t"}], "]"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6512604880585113`*^9, {3.6512605336794157`*^9, 3.65126056050871*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "322.4399757835893`"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"10.367255756846317`", " ", "t"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", "16"}], " ", 
    SuperscriptBox["\[Pi]", "2"], " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"4", " ", "\[Pi]", " ", "t"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6512604880585113`*^9, {3.6512605336794157`*^9, 3.651260560512703*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Cross", "::", "nonn1"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The arguments are expected to be vectors of equal length, \
and the number of arguments is expected to be 1 less than their length. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Cross/nonn1\\\", \
ButtonNote -> \\\"Cross::nonn1\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.651260488052511*^9, {3.6512605336754165`*^9, 3.6512605605252028`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "31.10176727053895`"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"10.367255756846317`", " ", "t"}], "]"}]}], ",", 
       RowBox[{"4", "+", 
        RowBox[{"4", " ", "\[Pi]", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"4", " ", "\[Pi]", " ", "t"}], "]"}]}]}]}], "}"}], "}"}], 
    "\[Cross]", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "322.4399757835893`"}], " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"10.367255756846317`", " ", "t"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"-", "16"}], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"4", " ", "\[Pi]", " ", "t"}], "]"}]}]}], "}"}], "}"}]}], 
   "]"}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"Abs", "[", 
       RowBox[{"4", "+", 
        RowBox[{"4", " ", "\[Pi]", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"4", " ", "\[Pi]", " ", "t"}], "]"}]}]}], "]"}], "2"], "+", 
     RowBox[{"967.3199273507679`", " ", 
      SuperscriptBox[
       RowBox[{"Abs", "[", 
        RowBox[{"Sin", "[", 
         RowBox[{"10.367255756846317`", " ", "t"}], "]"}], "]"}], "2"]}]}], 
    ")"}], 
   RowBox[{"3", "/", "2"}]]]], "Output",
 CellChangeTimes->{
  3.6512604880585113`*^9, {3.6512605336794157`*^9, 3.651260560528202*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"K", "[", "0", "]"}], "\[IndentingNewLine]", 
 RowBox[{"K", "[", "1", "]"}]}], "Input",
 CellChangeTimes->{{3.651260230747548*^9, 3.651260285723853*^9}}],

Cell[BoxData["1.1748816856746809`"], "Output",
 CellChangeTimes->{3.6512604880680113`*^9}],

Cell[BoxData[
 RowBox[{"0.033194140675744235`", " ", 
  SqrtBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"Abs", "[", 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"2.8894949550593876`", " ", 
        RowBox[{
         SuperscriptBox["Abs", "\[Prime]",
          MultilineFunction->None], "[", 
         RowBox[{"-", "0.8090169943749472`"}], "]"}]}]}], "]"}], "2"], "+", 
    SuperscriptBox[
     RowBox[{"Abs", "[", 
      RowBox[{"6.291134864362919`", "\[VeryThinSpace]", "+", 
       RowBox[{"4.388713994372337`", " ", 
        RowBox[{
         SuperscriptBox["Abs", "\[Prime]",
          MultilineFunction->None], "[", 
         RowBox[{"-", "0.8090169943749472`"}], "]"}]}]}], "]"}], 
     "2"]}]]}]], "Output",
 CellChangeTimes->{3.651260488073511*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "%524", "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"0.1189194839173848`", " ", 
  RowBox[{"\[Sqrt]", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"Abs", "[", 
       RowBox[{"17.859901912448844`", "\[VeryThinSpace]", "+", 
        RowBox[{"12.456414217341697`", " ", 
         RowBox[{
          SuperscriptBox["Abs", "\[Prime]",
           MultilineFunction->None], "[", "0.09410831331851414`", "]"}]}], 
        "-", 
        RowBox[{"15.696131315123381`", " ", 
         RowBox[{
          SuperscriptBox["Abs", "\[Prime]",
           MultilineFunction->None], "[", "7.883222077450927`", "]"}]}]}], 
       "]"}], "2"], "+", 
     SuperscriptBox[
      RowBox[{"Abs", "[", 
       RowBox[{"38.17422172995156`", "\[VeryThinSpace]", "-", 
        RowBox[{"4.624899899224932`", " ", 
         RowBox[{
          SuperscriptBox["Abs", "\[Prime]",
           MultilineFunction->None], "[", "0.09410831331851414`", "]"}]}], 
        "+", 
        RowBox[{"5.827763501672263`", " ", 
         RowBox[{
          SuperscriptBox["Abs", "\[Prime]",
           MultilineFunction->None], "[", "7.883222077450927`", "]"}]}]}], 
       "]"}], "2"]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.6512604880835114`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"curvature", " ", "=", " ", 
   RowBox[{"ParametricPlot", "[", 
    RowBox[{
     RowBox[{"K", "[", "t", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", " ", "0.9"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", "curvature", "]"}]}], "Input",
 CellChangeTimes->{{3.651259854162985*^9, 3.651259897758991*^9}, {
  3.6512599855452385`*^9, 3.6512599953776484`*^9}, {3.6512600375937986`*^9, 
  3.6512600451109447`*^9}, {3.6512601235020494`*^9, 3.651260188020937*^9}, {
  3.651260221114777*^9, 3.651260226848195*^9}, {3.651260258940897*^9, 
  3.651260260023896*^9}}],

Cell[BoxData[
 GraphicsBox[{},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{0., 0.}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.651260488122512*^9}]
}, Open  ]]
},
WindowSize->{958, 998},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.2 for Microsoft Windows (64-bit) (July 29, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 167, 3, 31, "Input"],
Cell[728, 25, 757, 17, 31, "Input"],
Cell[1488, 44, 1324, 25, 52, "Input"],
Cell[2815, 71, 157, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[2997, 78, 893, 22, 52, "Input"],
Cell[3893, 102, 91, 1, 31, "Output"]
}, Open  ]],
Cell[3999, 106, 1947, 42, 72, "Input"],
Cell[CellGroupData[{
Cell[5971, 152, 540, 10, 31, "Input"],
Cell[6514, 164, 21874, 372, 597, "Output"]
}, Open  ]],
Cell[28403, 539, 216, 4, 30, "Text"],
Cell[28622, 545, 275, 7, 31, "Input"],
Cell[CellGroupData[{
Cell[28922, 556, 261, 6, 31, "Input"],
Cell[29186, 564, 17384, 295, 162, "Output"]
}, Open  ]],
Cell[46585, 862, 362, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[46972, 873, 559, 13, 31, "Input"],
Cell[47534, 888, 88, 1, 31, "Output"]
}, Open  ]],
Cell[47637, 892, 172, 2, 30, "Text"],
Cell[CellGroupData[{
Cell[47834, 898, 712, 16, 31, "Input"],
Cell[48549, 916, 90, 1, 31, "Output"]
}, Open  ]],
Cell[48654, 920, 88, 1, 30, "Text"],
Cell[48745, 923, 485, 11, 31, "Input"],
Cell[CellGroupData[{
Cell[49255, 938, 530, 11, 31, "Input"],
Cell[49788, 951, 612, 12, 21, "Message"],
Cell[50403, 965, 238, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50678, 977, 580, 17, 52, "Input"],
Cell[51261, 996, 139, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51437, 1004, 825, 21, 52, "Input"],
Cell[52265, 1027, 465, 10, 21, "Message"],
Cell[52733, 1039, 467, 10, 21, "Message"],
Cell[53203, 1051, 698, 13, 21, "Message"],
Cell[53904, 1066, 242, 7, 31, "Output"]
}, Open  ]],
Cell[54161, 1076, 329, 7, 68, "Text"],
Cell[CellGroupData[{
Cell[54515, 1087, 1590, 43, 165, "Input"],
Cell[56108, 1132, 441, 12, 31, "Output"],
Cell[56552, 1146, 462, 13, 33, "Output"],
Cell[57017, 1161, 561, 11, 21, "Message"],
Cell[57581, 1174, 1512, 46, 91, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59130, 1225, 177, 3, 52, "Input"],
Cell[59310, 1230, 90, 1, 31, "Output"],
Cell[59403, 1233, 780, 21, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60220, 1259, 85, 2, 31, "Input"],
Cell[60308, 1263, 1198, 31, 55, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61543, 1299, 652, 14, 52, "Input"],
Cell[62198, 1315, 588, 19, 370, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
